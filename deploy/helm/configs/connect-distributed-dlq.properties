# Bootstrap servers urls
# bootstrap.servers=kafka-headless.kafka.svc.cluster.local:29092
bootstrap.servers=

offset.flush.interval.ms=10000
key.converter=org.apache.kafka.connect.storage.StringConverter
value.converter=org.apache.kafka.connect.storage.StringConverter

# If these properties are set to true, Kafka Connect will included the schema definition into the message.
# This only applies to source connector and is ignored for sink connectors. Also this only applies to JSON.
# This can be useful when you have a different system that validates the schema for you and makes sure that
# the message is in a correct format because JSON does not support schema validaton by default.
key.converter.schemas.enable=false
value.converter.schemas.enable=false

# ----- consumer -----
consumer.group.id=kafka-connect-dlq

# ----- producer -----
producer.group.id=kafka-connect-dlq

# ----- Specific to distributed
# Unique name for the cluster, used in forming the Connect cluster group. Note that this must not conflict with consumer group IDs
group.id=kafka-connect-dlq

# Topic to use for storing offsets. This topic should have many partitions and be replicated and compacted.
# Kafka Connect will attempt to create the topic automatically when needed, but you can always manually create
# the topic before starting Kafka Connect if a specific topic configuration is needed.
offset.storage.topic=kafka-connect-dlq-offsets
offset.storage.replication.factor=3
offset.storage.partitions=3

# Topic to use for storing connector and task configurations; note that this should be a single partition, highly replicated,
# and compacted topic. Kafka Connect will attempt to create the topic automatically when needed, but you can always manually create
# the topic before starting Kafka Connect if a specific topic configuration is needed.
config.storage.topic=kafka-connect-dlq-configs
config.storage.replication.factor=3
config.storage.partitions=1

# Topic to use for storing statuses. This topic can have multiple partitions and should be replicated and compacted.
# Kafka Connect will attempt to create the topic automatically when needed, but you can always manually create
# the topic before starting Kafka Connect if a specific topic configuration is needed.
status.storage.topic=kafka-connect-dlq-statuses
status.storage.replication.factor=3
status.storage.partitions=3


# =========== SCRAM/SASL and mTLS authentication properties ===========

# If you are using SCRAM/SASL authentication, populate and uncomment below lines
security.protocol=SASL_SSL
sasl.mechanism=PLAIN
sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="" password="";

consumer.security.protocol=SASL_SSL
consumer.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="" password="";
consumer.sasl.mechanism=PLAIN

producer.security.protocol=SASL_SSL
producer.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="" password="";
producer.sasl.mechanism=PLAIN


# If you are using mTLS authentication, uncomment and populate below fields
# security.protocol=SSL
# ssl.keystore.location=/var/private/ssl/kafka.client.keystore.jks
# ssl.keystore.password=<keystore password>
# ssl.key.password=<pkcs12 password>
# ssl.truststore.location=/var/private/ssl/kafka.client.truststore.jks
# ssl.truststore.password=<truststore password>

#consumer.security.protocol=SSL
#consumer.ssl.keystore.location=/var/private/ssl/kafka.client.keystore.jks
#consumer.ssl.keystore.password=<keystore password>
#consumer.ssl.key.password=<pkcs12 password>
#consumer.ssl.truststore.location=/var/private/ssl/kafka.client.truststore.jks
#consumer.ssl.truststore.password=<truststore password>

#producer.security.protocol=SSL
#producer.ssl.keystore.location=/var/private/ssl/kafka.client.keystore.jks
#producer.ssl.keystore.password=<keystore password>
#producer.ssl.key.password=<pkcs12 password>
#producer.ssl.truststore.location=/var/private/ssl/kafka.client.truststore.jks
#producer.ssl.truststore.password=<truststore password>

